generator client {
  provider = "prisma-client-js" // Genera el cliente de Prisma para usar en el código de Next.js
}

datasource db {
  provider = "postgresql"       // Base de datos relacional
  url      = env("DATABASE_URL") // URL de conexión en .env
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  password      String?
  roles         UserRole[] @default([CLIENT]) // Enum: BUSINESS o CLIENT
  isActive      Boolean    @default(true)
  emailVerified DateTime?  @map("email_verified")
  image         String?

  // Autenticación
  accounts      Account[]
  sessions      Session[]

  // Tiendas (si es BUSINESS)
  stores        Store[]    @relation("BusinessStores")

  // Órdenes (si es CLIENT)
  orders        Order[]    @relation("ClientOrders")

  @@map("users")
}

enum UserRole {
  BUSINESS
  CLIENT
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       String?

  // Dueño
  business    User      @relation("BusinessStores", fields: [businessId], references: [id], onDelete: Cascade)
  businessId  String

  // Productos
  products    Product[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("stores")
}

model Product {
  id          String      @id @default(uuid())
  title       String
  description String
  price       Float
  image       String?

  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId     String

  // Relación con items de órdenes
  orderItems  OrderItem[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("products")
}

model Order {
  id         String      @id @default(uuid())

  // Cliente que hace el pedido
  client     User        @relation("ClientOrders", fields: [clientId], references: [id], onDelete: Cascade)
  clientId   String

  // Relación con productos mediante OrderItem
  items      OrderItem[]

  createdAt  DateTime    @default(now())

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String

  quantity   Int      @default(1)
  unitPrice  Float    // Precio unitario en el momento de la compra

  @@map("order_items")
}

// Modelos de autenticación
model Account {
  id                       String  @id @default(uuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
